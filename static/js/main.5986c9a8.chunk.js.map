{"version":3,"sources":["components/TodoList/TodoList.jsx","api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","title","status","handleChange","event","target","name","value","setState","prepearedTodoList","todos","this","props","filter","todo","completed","className","onChange","includes","map","key","id","classNames","type","checked","readOnly","disabled","userId","onClick","onSelectedUser","React","Component","getData","url","fetch","then","response","ok","Error","statusText","json","CurrentUser","user","SelectedUser","a","selectedUser","data","prevProps","email","phone","clearSelectedUser","App","selectedUserId","getTodoList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5986c9a8.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\nexport class TodoList extends React.Component {\n  state = {\n    title: '',\n    status: 'All',\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  render() {\n    const { todos } = this.props;\n    const { title, status } = this.state;\n    let prepearedTodoList;\n\n    switch (status) {\n      case 'All':\n        prepearedTodoList = todos;\n        break;\n      case 'Completed':\n        prepearedTodoList = todos.filter(todo => todo.completed === true);\n        break;\n      case 'Active':\n        prepearedTodoList = todos.filter(todo => todo.completed === false);\n        break;\n      default:\n        break;\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <span>Search by title</span>\n        <input\n          name=\"title\"\n          value={title}\n          onChange={this.handleChange}\n        />\n        <select\n          value={status}\n          name=\"status\"\n          onChange={this.handleChange}\n        >\n          <option>All</option>\n          <option>Completed</option>\n          <option>Active</option>\n        </select>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {prepearedTodoList\n              .filter(todo => todo.title\n                && (todo.title).includes(title))\n              .map(todo => (\n                <li\n                  key={todo.id}\n                  className={classNames('TodoList__item', {\n                    'TodoList__item--checked': todo.completed,\n                    'TodoList__item--unchecked': !todo.completed,\n                  })\n                }\n                >\n                  <label>\n                    {todo.completed ? (\n                      <input type=\"checkbox\" checked readOnly />\n                    ) : (\n                      <input type=\"checkbox\" disabled />\n                    )}\n\n                    <p>{todo.title}</p>\n                  </label>\n                  <button\n                    className={classNames('button TodoList__user-button', {\n                      // eslint-disable-next-line\n                      'TodoList__user-button--selected': todo.userId === this.props.userId,\n                    })}\n                    type=\"button\"\n                    onClick={() => {\n                      this.props.onSelectedUser(todo.userId);\n                    }}\n                  >\n                    User #\n                    {todo.userId}\n                  </button>\n                </li>\n              ))}\n\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })).isRequired,\n  onSelectedUser: PropTypes.func.isRequired,\n  userId: PropTypes.number.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport function getData(url) {\n  return fetch(`${BASE_URL}${url}`)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\nimport { getData } from '../../api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    this.SelectedUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.SelectedUser();\n    }\n  }\n\n  SelectedUser = async() => {\n    const selectedUser = await getData(`/users/${this.props.userId}`);\n\n    this.setState({\n      user: selectedUser.data,\n    });\n  }\n\n  render() {\n    const { name, id, email, phone } = this.state.user;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => this.props.clearSelectedUser()}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearSelectedUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getData } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    this.getTodoList();\n  }\n\n  getTodoList = async() => {\n    const prepearedTodoList = await getData(`/todos`);\n\n    this.setState({\n      todos: prepearedTodoList.data,\n    });\n  }\n\n  onSelectedUser = (userId) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  }\n\n  clearSelectedUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            onSelectedUser={this.onSelectedUser}\n            userId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearSelectedUser={this.clearSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}